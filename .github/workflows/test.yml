name: Full Stack Tests
on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Install backend
      - name: Install backend
        working-directory: ./backend
        run: npm ci

      # Start backend
      - name: Start backend
        working-directory: ./backend
        run: |
          nohup npm start > backend.log 2>&1 &
          echo $! > backend.pid
        env:
          NODE_ENV: test
          PORT: 3001

      # Install frontend
      - name: Install frontend
        working-directory: ./frontend
        run: npm ci

      # Configure Playwright (let it handle the frontend server)
      - name: Configure Playwright
        working-directory: ./frontend
        run: |
          echo "import { defineConfig, devices } from '@playwright/test';

          export default defineConfig({
            testDir: './tests',
            fullyParallel: true,
            forbidOnly: !!process.env.CI,
            retries: process.env.CI ? 2 : 0,
            workers: process.env.CI ? 1 : undefined,
            reporter: 'html',
            use: {
              baseURL: 'http://localhost:3000',
              trace: 'on-first-retry',
            },
            projects: [
              {
                name: 'chromium',
                use: { ...devices['Desktop Chrome'] },
              },
            ],
            webServer: {
              command: 'npm start',
              url: 'http://localhost:3000',
              reuseExistingServer: false,
              timeout: 120 * 1000
            }
          });" > playwright.config.ts

      # Run tests (Playwright will start the frontend server)
      - name: Run Playwright tests
        working-directory: ./frontend
        run: |
          npx playwright install --with-deps
          npx playwright test

        # Run tests (API will start the backend server)
      - name: Run API tests
        working-directory: ./backend
        run: |
          npm install -g newman
          newman run postman_api_testing/collection/Todo_APIs.json \
            -e postman_api_testing/environment/Todo_Env.json

      # Debug logs
      - name: Debug logs
        if: always()
        run: |
          echo "=== Backend Log ==="
          cat backend/backend.log || true
